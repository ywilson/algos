1.3.1 Add a method isFull() to FixedCapacityStackOfStrings

public class FixedCapacityStackOfStrings{
    
    private String[] a; // stack entries
    private int N; // size
    public FixedCapacityStackOfStrings(int cap)
    {
        a = new String[cap]; 
    }
    
    public boolean isEmpty() { 
        return N == 0; 
    }
    
    public int size() {
        return N; 
    }

    public void push(String item){
        a[N++] = item; 
    }
    
    public String pop(){
        return a[--N]; 
    
    }
}

ANS:
public boolean isFull(){
    return (N -=1);
}

1.3.3 Suppose that a client performs an intermixed sequence of (stack) push and pop operations.
      The push operations put the integers 0 through 9 in order on to the stack; the
      pop operations print out the return value. Which of the following sequence(s) could
      not occur?

a. 4 3 2 1 0 9 8 7 6 5
b. 4 6 8 7 5 3 2 9 0 1
c. 2 5 6 7 4 8 9 3 1 0
d. 4 3 2 1 0 5 6 7 8 9
e. 1 2 3 4 5 6 9 8 7 0
f. 0 4 6 5 3 8 1 7 2 9
g. 1 4 7 9 8 6 5 3 0 2
h. 2 1 4 3 6 5 8 7 9 0

Ans:
b, f and g cannot occure because they contain items that were once stacked and they can't be put in a different order.

1.3.6 What does the following code fragment do to the queue q?

Stack<String> stack = new Stack<String>();
while (!q.isEmpty())
 stack.push(q.dequeue());
while (!stack.isEmpty())
 q.enqueue(stack.pop());

ANS:
The queue items get reversed.

1.3.9  Write a program that takes from standard input an expression without left parentheses
       and prints the equivalent infix expression with the parentheses inserted. For
       example, given the input:

1 + 2 ) * 3 - 4 ) * 5 - 6 ) ) )
your program should print
( ( 1 + 2 ) * ( ( 3 - 4 ) * ( 5 - 6 ) )






1.3.13 Suppose that a client performs an intermixed sequence of (queue) enqueue and
       dequeue operations. The enqueue operations put the integers 0 through 9 in order onto
       the queue; the dequeue operations print out the return value. Which of the following
       sequence(s) could not occur?

a. 0 1 2 3 4 5 6 7 8 9
b. 4 6 8 7 5 3 2 9 0 1
c. 2 5 6 7 4 8 9 3 1 0
d. 4 3 2 1 0 5 6 7 8 9

ANS: b,c,d because they are not in order

1.13.17



